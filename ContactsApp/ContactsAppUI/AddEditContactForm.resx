<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMEOAADBDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALtPJwC+UiwAu1ArAMJVLAD/1VcAv1MrIcJULF/EVSygxFYszsVW
        LOjEVSz0wVQr9MFUKujBUyrOwVMqoMBSKmC9UCgh//9xAMBSKAC6SycAvE4oALhPJQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC7USsAxFcuAMFVLQD/lUMAwVQsLsRXLIvFWC3Yxlgt+cdY
        Lf/HWC3/xlct/8NVLP/CVSz/wlUr/8NVK//DVSv/w1Ur+cJUKtjBUymMv1EoLv+fOgC/UCgAwlIpALpM
        KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvVEsAP//vgDEVy4Av1QsE8RXLX3GWC7kx1ku/8dZ
        Lv/HWS3/x1kt/8ZYLf/CViz/wlUs/8JVLP/CVSz/w1Ur/8NVK//DVSv/xFYr/8RWK//EVSrkwlMpfb5P
        KBPCUikA////ALtOJwAAAAAAAAAAAAAAAAAAAAAAAAAAAL1SLACvRigAx1ovAMJWLizFWC64x1ov/8da
        L//HWi//x1ku/8dZLv/GWC7/wVUs/8FVLP/BVSz/wlUs/8JVLP/DVSz/w1Us/8NVK//DVSv/xFYr/8RW
        K//EVir/w1QpuMBRKSzEVCoArkUkALpNJwAAAAAAAAAAAAAAAAC7Ui0A////AMdbMADEVy82xlov0chb
        MP/HWi//x1ov/8daL//HWi//xVkv/8FVLv/AVC3/wFQs/8FVLP/BVSz/wlUs/8JVLP/DVSz/w1Ys/8NV
        K//DVSz/xFYr/8RWK//FVir/xFQq0cFSKTbFVSoA////ALhMJgAAAAAAu1MrAMdbMQDFWTAAw1cvLMda
        MNHIWzD/yFsw/8hbMP/IWzD/yFsw/8ZZL//BVi7/v1Ut/8BVLv/BVS7/wVUt/8FVLf/BVS3/wlUs/8JV
        LP/DViz/w1Ys/8NWLP/DVSz/xFYs/8RWK//FVir/xFQq0cBSKSzCUykAxFQqALRLIADBVi8Aw1gwAMJX
        LxPHWjG4yFsx/8hbMf/IWzH/yFsx/8daMP/EWC//vlQt/71TLP+9Uyz/vlMs/75TLf+/Uyz/v1Mr/79T
        K/+/Uyv/wFMr/8BTK//BVCv/wVQq/8FUK//CVSz/xFUs/8RWK//FVir/xFQpuMBQKBPBUSkAv1AoAL9U
        LwD/kkgAxloxfchcMv/IXDL/yFwy/8hcMv/IXDL/xmI9/8BjQ/+9YUL/vWFB/71hQf++YUH/vmFB/79h
        Qf+/YUH/v2FA/79hQP+/YUD/wGE//8BhP//BYT//wFs3/8BTK//CVSz/xFYs/8RWK//FVir/w1Qpff+U
        OQC8TScAxlsxAMVaMS7HXDLkyF0y/8hdMv/IXTL/yFwx/8plPv/iwbX/6dzY/+ja1v/o2tb/6NrW/+ja
        1v/o2tX/6NrW/+ja1v/o2tX/6NrV/+ja1f/o2tX/6NrV/+nb1//fvrL/wFs3/8FUK//DVSz/xFYr/8RW
        K//EVSrkwlMoLsNTKQD/s1IAx1wyi8hdMv/IXTL/yF0y/8hdMv/IXDH/zG1H/+zf2v/z9fX/8vPz//Lz
        8//y8/P/8vLz//Ly8//y8vP/8vLz//Ly8//y8vP/8vLz//Ly8//y8vP/8vT1/+rc2P/CYkD/wVMq/8NV
        LP/DVSz/xFYr/8RWK//DVSmL/7JWAMVbMiHIXTPYyF0z/8hdM//IXTP/yF0z/8hcMv/MbEf/7N3Y//Lz
        9P/y8vL/8vLy//Ly8v/x8fH/8fHx//Hx8f/x8fH/8fHx//Hx8f/x8fH/8fHx//Hx8f/x8vP/6dvW/8Fi
        QP/BUyv/w1Ys/8NVK//DVSv/xFYr/8RVKtjBUikhyF0zX8leNPnJXjT/yV40/8leNP/JXjT/yV0z/8xs
        Rv/s3df/8vP0//Ly8v/y8vL/8vLy//Ly8v/y8vL/8fHx//Hx8f/x8fH/8fHx//Hx8f/x8fH/8fHx//Lz
        8//p2tX/wmE//8FUK//DViz/w1Ys/8NVK//DVSv/xFUr+cRVKmDJXjSgyV40/8lfNf/JXzX/yV81/8lf
        Nf/JXjT/ymM6/+XDtv/z9fb/8vLy//Ly8v/y8vL/8vLy//Ly8v/y8vL/8fHx//Hx8f/x8fH/8fHx//Hx
        8f/x8fH/8vT1/+C/sv+/VzL/wVQs/8JVLP/DVSz/w1Us/8NVK//FViv/xlYroMlfNc7JXzX/yV81/8lf
        Nf/JXzX/yV81/8lfNf/JXjP/0Xxb/+vY0f/z9PX/8vPz//Ly8v/y8vL/8vLy//Ly8v/y8vL/8vLy//Hx
        8f/x8fH/8fLy//L09P/o1s//yXNU/79TK//BVS3/wlUs/8JVLP/DVSz/xVYs/8ZXLP/GVyvOyV826Mlf
        Nv/JXzb/yV82/8lfNv/JXzb/yV82/8lfNv/JXjT/0HdU/+O7rP/v6OX/8/T0//P09f/y9PT/8vP0//Lz
        9P/z9PT/8vT1//Lz8//u5+T/3rep/8duTv+/Uyz/wVUt/8FVLf/BVS3/wlUs/8VXLf/HWC3/xlcs/8ZX
        K+jKYDf0yWA3/8lgN//JYDf/yWA3/8lgN//JYDf/yWA3/8lfNv/JXjT/ymI5/9J+Xf/dppH/5sa6/+vY
        0P/t39n/7N/Z/+nX0P/jxLn/16KO/8l2Wf/AWDP/v1Qt/8BWL//BVS7/wVUt/8FVLf/EVy3/x1kt/8dY
        Lf/GVyz/x1cs9MphN/TJYDf/ymE3/8phN//KYTf/ymE3/8phN//JYDf/yWA3/8lgN//JXzb/yF00/8hd
        M//JYjn/y2pD/8tsSP/EZ0b/wWE//75ZNf++VC3/vlQt/79VL/+/VS//wFUu/8BWL//BVS7/xFcu/8dZ
        Lv/HWS3/x1gt/8dYLf/HWCz0ymI46MphN//KYTf/ymE3/8phN//KYTf/ymE3/8phN//KYTf/ymE3/8lg
        N//JYDf/yV82/8hdNP/EWjL/vVk2/7lWNP+4US3/u1Mv/71VMP++VjD/v1Yw/79VL/+/VS//wFYu/8RY
        L//HWi//x1ku/8dZLf/HWS3/x1gt/8dYLejLYjnOymE4/8phOP/KYTj/ymE4/8phOP/KYTj/ymE4/8ph
        OP/KYTf/ymE3/8lgN//IXjX/yWpG/9Wgjv/gxr7/4MW9/9Gci/+7X0D/ulIu/71VMP++VTD/vlYv/79V
        L//EWC//yFsw/8daL//HWS7/x1ku/8dZLf/HWC3/x1kuzsxkO6DKYjn/ymI5/8piOf/KYjn/ymI5/8pi
        Of/KYjn/ymE4/8phOP/KYTf/ymA2/8ppQ//iwrX/8vP0//P19f/z9fX/8vP0/929s/+6XDz/u1Mv/75V
        MP++VTD/xFkw/8hbMf/IWzD/x1ov/8daL//HWS7/x1kt/8dYLf/JWzCfzGc/YMpjOvnKYjn/ymM6/8pj
        Ov/KYzr/ymM6/8piOf/KYjn/ymI5/8phOP/JXzX/15d9//Lx8f/y8vL/8vLy//Ly8v/y8vL/8vHx/8yN
        eP+5USz/vlUw/8NZMf/IXDL/yFsx/8hbMP/HWy//x1ov/8dZLv/HWS3/x1ku+cpdM1/ObEUhy2U82Mpj
        Ov/KYzr/ymM6/8pjOv/KYzr/ymM6/8pjOv/KYjn/ymI5/8lgN//htaT/8/X1//Ly8v/y8vL/8vLy//Ly
        8v/z9fb/2a6g/7lSLv/DWTH/yF0y/8hcMv/IWzH/yFsw/8hbMP/HWi//x1ku/8dZLf/IWy/Yy2I5IU4A
        AADMZ0CMymM7/8pjO//KYzv/ymM7/8pjO//KYzv/ymM6/8pjOv/KYjn/yWA3/9+um//z9PX/8vLy//Ly
        8v/y8vL/8vLy//P19f/Xp5j/wFYv/8ddMv/IXTL/yFwy/8hbMf/IWzH/yFsw/8daL//HWS7/x1ku/8le
        M4tgAAAAzmtEAM9tRy7LZT7ky2Q8/8tkPP/LZDz/y2Q8/8pjO//KYzv/ymM6/8pjOv/JYDf/1IVm//Dp
        5v/y9PT/8vLy//Ly8v/y9PT/7+jm/85/Yv/GWjH/yF0z/8hdMv/IXDL/yFwy/8hbMf/IWzD/x1ov/8dZ
        Lv/IWzDky2M6LsthNwDVfVoAhQAAAM5qQ33LZT3/y2U8/8tlPP/LZDz/y2Q8/8pjO//KYzv/ymM6/8pi
        Of/KYzr/256G/+7k4P/y8/P/8vPz/+7k4P/ZnIT/x142/8hdM//IXTP/yF0y/8hcMv/IXDL/yFsx/8hb
        MP/HWi//x1ow/8pgNn1+AAAA0nVQANJ3UwDQckwA0XVQE81pQrjLZT3/y2U8/8tlPP/LZDz/y2Q8/8pj
        O//KYzr/ymI5/8phOP/KYTj/0XtZ/9mZgP/ZmYD/0HlY/8hfNf/JXjT/yV40/8hdM//IXTL/yFwy/8hc
        Mv/IWzH/yFsw/8dbMP/JXjS4zmpDE81nPwDQbkcA0X9gAM5qQgDObEYA0HJNLM1pQtHLZT3/y2U8/8tl
        PP/LZDz/ymM7/8pjOv/KYzr/ymI5/8phOP/KXzX/yV40/8hdNP/IXTT/yV81/8lfNf/JXjT/yF0z/8hd
        Mv/IXDL/yFwy/8hbMf/IWzD/yV400cxnQCzKYjgAyl81ANN5WQAAAAAA1IBfAAAAAADMaEAA0HFMNs1p
        QtHLZTz/y2U8/8tkPP/KYzv/ymM6/8pjOv/KYjn/ymE4/8phN//KYTf/yWA3/8lfNv/JXzX/yV81/8le
        NP/IXTP/yF0y/8hdMv/IXDL/yFsx/8pfNdHNaEA2yV0zAAAAAADRd1UAAAAAAAAAAAAAAAAA1X9eAOOh
        iQDMaEAA0XNOLM1qQ7jLZT3/y2Q8/8pjO//KYzr/ymI5/8piOf/KYTj/ymE3/8phN//JYDf/yV82/8lf
        Nf/JXjT/yV40/8hdM//IXTL/yFwy/8hdM//KYTi4zmpDLMleNADfm4EA0nZTAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA1oBeAAAAAADPbkgA03hVE89tR33MZ0DkymQ7/8pjOv/KYjn/ymI5/8phOP/KYTf/yWA3/8lg
        N//JXzb/yV81/8leNP/JXjT/yF0z/8heM//KYDbkzGU9fdBwSxPMZT0AAAAAANJ3UwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA1H9fAM9uRwDSdVEAcQAAANFyTi7Oa0WMzGc/2MtkO/nKYjn/ymE4/8ph
        N//JYDf/yV82/8lfNv/JXzX/yV81/8lfNvnKYTjYzGY9i89tRi5sAAAAz21HAMxlPQDSeVUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0XxZANV9WgDYhGMA0HBLABUAAADSdlEhz25IYM1q
        Q6DMZ0DOzGY96MtlPfTLZDz0y2Q86MxlPc7MZz+gzmpDYNBxTCEZAAAAzmtDANV9XADSdlMA03tTAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAH/AAAA/gAAAHwAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAcAAAAPgAAAH8AAAD/gAAB8=
</value>
  </data>
</root>